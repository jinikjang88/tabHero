다음 시나리오를 통해 python 및 Tkinter으로 코드를 작성해주길 바랍니다.

UI구성
1. 화면의 크기는 400 x 400 으로 합니다.
2. 왼쪽 하단에 플레이어의 레벨, 체력바, 마력바가 표기 됩니다.
3. 레벨은 숫자로 되어있습니다. 화면 기준으로 왼쪽 마진 10, 탑 마진 350 으로 왼쪽 정렬입니다. 크기는 10 폰트입니다.
4. 체력바와 마력바는 전체 100%이고, 각각 빨간색과 파란색으로 가로로 표기됩니다.
5. 체력바는 회면 기준으로 왼쪽 마진 10, 탑 마진 370으로 왼쪽 정렬입니다. 가로 100의 크기, 세로 10의 크기를 가집니다.
6. 마력바도 화면 기준으로 왼쪽 마진 10, 탑 마진 380으로 왼쪽 정렬입니다. 가로 100의 크기, 세로 10의 크기를 가집니다.
7. 플레이어는 화면 정중앙에서 약간 왼쪽으로 본인의 크기만큼 치우쳐 있습니다. 본인의 크기라 함은 사이즈 30 x 60 입니다.
8. 임의로 플레이어는 네모난 파란색 박스로 보여줄 수 있습니다.
9. 생성될 몬스터는 플레이어의 화면 y의 중앙을 기준으로 대칭하여 나타납니다. 색상은 몬스터의 레벨별로 다릅니다.
10. 몬스터 레벨 1~3인 경우 아이보리색, 4~6인 경우 초록색, 7~10인 경우 보라색으로 표기됩니다. 
11. 몬스터의 체력바의 위치는 생성된 몬스터 y값의 + 3 정도 위에 있도록 보여줍니다.

게임로직
1. 처음 몬스터 레벨은 1입니다.
2. 몬스터의 체력은 레벨별로 다르며 1~3레벨인 경우 10~20최대값을 가진 100%, 4~6레벨인 경우 30~50최대값을 가진 100%, 7~1레벨0인 경우 60~100최대값을 가진 100%입니다. 이를 백분위로 체력바를 표기합니다.
3. 플레이어는 무기를 가지고 있습니다. 무기는 단검, 한손검과 방패, 양손검 중 하나를 가질 수 있고 기본으로 한손검과 방패를 가지고 있습니다.
4. 단검의 공격력은 1에서 3까지, 한손검과 방패의 공격력은 4~5까지, 양손검의 공격력은 6~7까지 입니다.
5. 플레이어는 몬스터를 클릭할 수 있습니다.
6. 몬스터를 클릭 시 몬스터 박스 색이 빨간색으로 잠깐 바뀌고 0.5초 후 원래 색으로 돌아옵니다.
7. 몬스터를 클릭 시 무기 공격력 만큼 몬스터의 체력바가 줄어듭니다. 줄어드는 것이 보여야 합니다.
8. 몬스터의 체력바가 0으로 되면 몬스터는 죽습니다.
9. 몬스터가 죽고나서, 1초 뒤 그 다음 레벨의 몬스터가 생성되고 다시 몬스터를 죽일 수 있습니다.


이제 여기서 시나리오를 더 추가해보자.
1. 플레이어는 무기를 소지 할 수 있다.
2. 무기 종류 단검, 한손검, 양손검 이 있다.
3. 키보드 1번을 누르면 단검, 2번을 누르면 한손검, 3번을 누르면 양손검으로 무기를 교체해서 착용할 수 있다.
4. 기본 무기는 1번인 단검을 착용하고 있다.

좋아! 이제 각 무기에 공격력을 넣어보자.
단검은 1~3만큼의 공격력이 있고,
한손검은 4~6만큼의 공격력
양손검은 7~10만큼의 공격력을 가지고 있다.

그럼 이제 무기 공격력을 출력해보자
몬스터를 클릭 했을 때, 몬스터 주변에 무기공격력의 숫자가 보이고 0.3초 뒤 사라지게 해보자.

실행 시 오류 Traceback (most recent call last):
  File "/Users/mz02-jijang/Documents/기타/games/main.py", line 12, in <module>
    m = monster.Monster(root, level=1)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Monster.__init__() missing 2 required positional arguments: 'player' and 'color'


다음 시나리오는
몬스터의 체력이 0이 되어서 파괴되었을때 새로운 몬스터가 나오는거야.
그 몬스터는 레벨이 1~10까지 중에 랜덤하게 생성되는 거지.

좋아! 다음 시나리오는
각 무기의 클릭에 대한 delay가 필요할 것 같아.
단검의 경우 1초에 10번 클릭 할 수 있고,
한손검의 경우 1초에 7번 클릭 할 수 있고,
양손검의 경우 1초에 5번 클릭 할 수 있어


좋아 이제 위 코드 기준으로 계속해서 시나리오 만들어보자
이번은 시나리오는 레벨링 시스템이야
1. 플레이어 레벨 1부터 최대 레벨 100까지 있다.
2. 플레이어는 다음 조건으로 레벨up을 한다.
3. 레벨은 1부터 100까지 팩토리얼로 경험치량이 설정된다.
4. 레벨 1은 경험치 총량이 10이다.
5. 레벨 2는 경험치 총량이 20이다.
6. 레벨 3은 경험치 총량이 60이다.
7. 레벨 4는 경험치 총량이 240이다.
8. 즉 레벨별 10 * n 팩토리얼 만큼 증가한다.


좋아!! 다음 시나리오는 '화폐' 이야
1. 플레이어는 최초 1000골드를 가지고 있다.
2. 플레이어는 몬스터를 죽이면 10에서 100골드 사이의 골드를 획득 할 수 있다.
3. 플레이어의 골드 총량 표기는 마력바 아래에 위치 하도록 한다.












아래 소스들로 기억해줘
파일명 : main.py

== 소스 시작 ==
from tkinter import *
import player
import monster

def main():
    root = Tk()
    root.geometry("400x400")

    p = player.Player(root)

    # Let's create the initial monster. The color will depend on its level.
    level = 1
    color = ""
    if level <= 3:
        color = "ivory"
    elif level <= 6:
        color = "green"
    else:
        color = "purple"

    m = monster.Monster(root, p, level, color)

    root.mainloop()

if __name__ == "__main__":
    main()
== 소스 끝 ==

몬스터 소스도 기억해줘
파일명 : monster.py
== 소스 시작 ==
from tkinter import *
import random
from player import Player

class Monster:
    def __init__(self, root, player: Player, level, color):
        self.root = root
        self.level = level
        self.color = color
        self.max_hp = random.randint(level*10, level*10 + 10)
        self.hp = self.max_hp

        self.monster_box = Canvas(root, width=30, height=60, bg=self.color)
        self.monster_box.place(x=200, y=170)

        self.hp_bar = Canvas(root, width=40, height=10, bg="red")
        self.hp_bar.place(x=195, y=160)

        self.damage_label = Label(root, text="")
        self.damage_label.place(x=195, y=130)

        self.player = player
        self.monster_box.bind("<Button-1>", self.monster_click)

    def monster_click(self, event):
        damage = self.player.attack()
        if damage > 0:
            self.hp -= damage
            if self.hp < 0:
                self.hp = 0
            self.hp_bar.config(width=40 * (self.hp / self.max_hp))

            self.damage_label.config(text=f"-{damage}")
            self.root.after(300, lambda: self.damage_label.config(text="") if self.damage_label.winfo_exists() else None)

            if self.hp <= 0:
                self.monster_box.destroy()
                self.hp_bar.destroy()
                self.damage_label.destroy()

                # When the monster is defeated, spawn a new one with a random level.
                level = random.randint(1, 10)
                color = ""
                if level <= 3:
                    color = "ivory"
                elif level <= 6:
                    color = "green"
                else:
                    color = "purple"

                Monster(self.root, self.player, level, color)
== 소스 끝 ==

플레이어 소스도 기억해줘
파일명 : player.py

== 소스 시작 ==
from tkinter import *
import random
import time

class Player:
    def __init__(self, root):
        self.root = root
        self.level = 1
        self.health = 100
        self.mana = 100

        self.weapons = [{"name": "dagger", "damage": range(1, 4)},
                        {"name": "one-handed sword", "damage": range(4, 7)},
                        {"name": "two-handed sword", "damage": range(7, 11)}]
        self.current_weapon = self.weapons[0]

        self.level_label = Label(root, text=f"Level: {self.level}, Weapon: {self.current_weapon['name']}", font=("Arial", 10))
        self.level_label.place(x=10, y=350)

        self.health_bar = Canvas(root, width=100, height=10, bg="red")
        self.health_bar.place(x=10, y=370)

        self.mana_bar = Canvas(root, width=100, height=10, bg="blue")
        self.mana_bar.place(x=10, y=380)

        self.player_box = Canvas(root, width=30, height=60, bg="blue")
        self.player_box.place(x=170, y=170)

        self.last_click_time = time.time() - 1.0

        root.bind("<Key>", self.change_weapon)

    def change_weapon(self, event):
        if event.char == '1':
            self.current_weapon = self.weapons[0]
        elif event.char == '2':
            self.current_weapon = self.weapons[1]
        elif event.char == '3':
            self.current_weapon = self.weapons[2]
        self.level_label.config(text=f"Level: {self.level}, Weapon: {self.current_weapon['name']}")

    def attack(self):

        if self.current_weapon['name'] == "dagger":
            delay = 0.2 * 0.5
        elif self.current_weapon['name'] == "one-handed sword":
            delay = 0.35 * 0.5
        else:
            delay = 0.5 * 0.5

        if time.time() - self.last_click_time >= delay:
            self.last_click_time = time.time()
            return random.choice(self.current_weapon['damage'])
        else:
            return 0
== 소스 끝 ==
